//button跳转页面
var btn1 = document.getElementsByName("loginbtn");
btn1 = window.location.href= '首页.html';

setAttribute("title","James")	设置属性
getAttribute("title")		获取属性
removeAttribute("style");	删除属性
childNodes			访问子节点
parentNodes			访问父节点
createElement			创建元素节点 //最后一定要加上 body.appendChild();
createTextNode			创建文本节点 //最后一定要加上 body.appendChild();
insertBefore("添加的节点","插入的节点")
removeChild(节点.childNodes(1));

window.open("###.html","windowname","height,width,top,left");
window.close();

setIntervar(function(),1000)	间隔指定的毫秒数不停地执行指定代码
clearIntervar()			用于停止执行setIntervar()方法
setTimeout(function(),1000)	暂停指定的毫秒数后执行指定代码
clearTimeout()			用于停止执行setTimeout()方法

window.screen()			用户屏幕的信息
screen.availWidth		可用的屏幕宽度
screen.availHeight		可用的屏幕高度
screen.height			屏幕高度
screen.width			屏幕宽度

Math.random()			来返回 0 到 1 之间的随机数
Math.floor(x)			返回小于等于 x，且与 x 最接近的整数
valueOf() 			方法返回 Math 对象的原始值。

Date()		返回当日的日期和时间。
getDate()	从 Date 对象返回一个月中的某一天 (1 ~ 31)。
getDay()	从 Date 对象返回一周中的某一天 (0 ~ 6)。
getMonth()	从 Date 对象返回月份 (0 ~ 11)。
getFullYear()	从 Date 对象以四位数字返回年份。
getHours()	返回 Date 对象的小时 (0 ~ 23)。
getMinutes()	返回 Date 对象的分钟 (0 ~ 59)。
getSeconds()	返回 Date 对象的秒数 (0 ~ 59)。
getMilliseconds()	返回 Date 对象的毫秒(0 ~ 999)。
//正则表达式

i     忽略大小写
m     多行匹配
\d    找出字符串第一个出现的数字  相当于[0-9]
\D    相当于 [^\d]
\w    英文、数字、下划线
\W    相当于 [^\w]
\s    空白字符               
\S    相当于 [^\s]
g     找到全部匹配的
+     若干个  相当于 {1,}
?     ?之前的内容可有可无,相当于{0,1}
()    括号内与括号外隔开
|     或者
*     任意次 相当于{0,}
{n}   正好出现n次
{n,m} 最少n次，最多m次
{n,}  最少n次，最多不限
[]    取括号里面任意一个或者范围都可以
^     除……外。如果在行首 字符串开头
$     行尾 字符串结尾
.     任意字符
\.    .本身


方法:
/re/.test("str")   			检测字符串是否匹配,返回true和false
/re/.exec("str")			检索字符串中的正则表达式的匹配。找到匹配的文本则返回一个数组，否则返回null
/re/.compile(/re/) 			方法用于在脚本执行过程中编译正则表达式,也可以用于改变和重新编译正则表达式。
search(/re/)				检索与正则表达式相匹配的值，返回位置 //不执行全局匹配，忽略g、lastIndex属性
match(/re/)					找到一个或多个正则表达式的匹配,不匹配返回null
replace(/re/,"替换内容")   		替换与正则表达式匹配的子串
split("")  				把字符串分割为字符串数组
substring()  				获取子字符串
charAt() 				获取某个字符





//JS事件
onabort		图像加载被中断
onblur		元素失去焦点
onchange	用户改变域的内容
onclick		鼠标点击某个对象
ondblclick	鼠标双击某个对象
onerror		当加载文档或图像时发生某个错误
onfocus		元素获得焦点
onkeydown	某个键盘的键被按下
onkeypress	某个键盘的键被按下或按住
onkeyup		某个键盘的键被松开
onload		某个页面或图像被完成加载
onmousedown	某个鼠标按键被按下
onmousemove	鼠标被移动	
onmouseout	鼠标从某元素移开
onmouseover	鼠标被移到某元素之上
onmouseup	某个鼠标按键被松开
onreset		重置按钮被点击
onresize	窗口或框架被调整尺寸
onselect	文本被选定
onsubmit	提交按钮被点击
onunload	用户退出页面





//canvas

<body onload="draw('canvas')"></body>    

context   上下文,封装了很多绘图功能的对象
获取方法:
var context =canvas.getContext("2d");


canvas元素绘制图像的时候有两种方法，分别是

context.fill()    //填充
context.stroke()  //绘制边框


style:在进行图形绘制前，要设置好绘图的样式

context.fillStyle	//填充的样式
context.strokeStyle	//边框样式
context.lineWidth	//图形边框宽度


颜色的表示方式:

直接用颜色名称:"red" "green" "blue"
十六进制颜色值: "#EEEEFF"
rgb(1-255,1-255,1-255)
rgba(1-255,1-255,1-255,透明度)


//绘制矩形 
context.fillRect(x,y,width,height);
context.strokeRect(x,y,width,height);

清楚矩形区域
context.clearRect(x,y,width,height);

//圆弧
context.beginPath();
context.arc(x, y, radius, starAngle,endAngle, anticlockwise)
context.closePath();
context.fill();    //最后必须加这一行

x:圆心的x坐标
y:圆心的y坐标
straAngle:开始角度
endAngle:结束角度
anticlockwise:是否逆时针（true）为逆时针，(false)为顺时针


//绘制线段 
context.moveTo(x,y)
context.lineTo(x,y)
每次画线都从moveTo的点到lineTo的点，如果没有moveTo那么第一次lineTo的效果和moveTo一样，每次lineTo后如果没有moveTo，那么下次lineTo的开始点为前一次lineTo的结束点。



//绘制贝塞尔曲线（贝济埃、bezier）
context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y) 

cp1x:第一个控制点x坐标
cp1y:第一个控制点y坐标
cp2x:第二个控制点x坐标
cp2y:第二个控制点y坐标
x:   终点x坐标
y:   终点y坐标

绘制二次样条曲线 
context.quadraticCurveTo(qcpx,qcpy,qx,qy)

qcpx:二次样条曲线控制点x坐标
qcpy:二次样条曲线控制点y坐标
qx:  二次样条曲线终点x坐标
qy:  二次样条曲线终点y坐标


//线性渐变 
var lg= context.createLinearGradient(xStart,yStart,xEnd,yEnd)

xstart:渐变开始点x坐标
ystart:渐变开始点y坐标
xEnd:渐变结束点x坐标
yEnd:渐变结束点y坐标

线性渐变颜色
lg.addColorStop(offset,color)

offset:设定的颜色离渐变结束点的偏移量(0~1)
color:绘制时要使用的颜色