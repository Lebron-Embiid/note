-----------------数据类型------------------------------------------------------------------

typeof操作符（检测定义变量的数据类型）| alert(typeof(null)) | alert(typeof null) 
“undefined”――如果值未被定义
“boolean”  ――如果值是布尔值
“string”   ――如果值是字符串
“number”   ――如果值是数值
“object”   ――如果值是对象或null
“function” ――如果值是函数

1、undefined 类型只有一个值，即特殊的undefined。在var声明变量但未初始化时，这个值就是undefined
2、null 类型也只有一个值，这个特殊的值是null。alert(null == undefined)是true
3、boolean 类型字面值true和false是分大小写的。可以对任何数据类型的值调用Boolean()来返回一个布尔值
4、number 类型除了十进制，还可以用八进制（首位必须是0）和十六进制（前2位必须是0X）。可以用number()来检测。
(1)float 浮点型必须包含一个小数点，并且小数点后至少有一位数字。虽然小数点前可以没有正数，但不推荐。
(2)NaN 即非数值（Not a Number），可以用isNaN()来检测变量、对象，任何数值除以0都会返回NaN，并且NaN与任何值都不想等，包括NaN本身。
5、string 类型可以有单引号（''）和双引号（""）表示。可以用.toString()的方法返回对象的字符串。
转义字符:
\n	――换行
\t	――制表
\b	――空格
\r	――回车
\\	――斜杠
\'	――单引号
\"	――双引号
\xnn	――以十六进制代码nn表示的一个字符（其中n为0-F）
\unnn	――以十六进制代码nnnn表示的一个Unicode字符（其中n为0-F）
6、object 类型是一组数据和功能的集合，可以通过new操作符来创建。方法.valueOf()用来返回对象的字符串、布尔型、数值表示，通常与toString（）方法的返回值相同。

-------------------------------------------------------------------------------------------

（1）一元操作符

递增、递减操作符: ++ 、 --
加减操作符: +（放数值前面，对数值不会产生任何影响） 、 -（放在数值前，转为负数）
乘性操作符: *
除性操作符: /
求余操作符: %

（2）布尔操作符

逻辑非: !
逻辑与: &&
逻辑或: ||

（3）关系操作符

小于: 	  <
大于: 	  >
小于等于: <=
大于等于: >=
等于: 	  ==
不等于:   !=
全等:	  ===
不全等:   !==

（4）条件操作符

(x > y) ? x : y

（5）赋值操作符

乘赋值: *=
除赋值: /=
余赋值: %=
加赋值: +=
减赋值: -=
左移赋值: <<=
右移赋值: >>=
无符号右移赋值: >>>=

-------------------------------------------------------------------------------------------

语句

if（）｛｝else（）｛｝
while（）｛｝
for(var i=0;i<count;i++)｛｝
for（var p in window）｛｝
break语句用于在循环中控制代码执行，退出循环。
continue语句虽然也是退出循环，但是退出循环后会从顶部继续执行。
switch（expression）｛
	case value: statement
		    break;
	case value: statement
		    break;
	case value: statement
		    break;
	default:statement;
｝

-------------------------------------------------------------------------------------------

函数

function test（a，b，c）｛｝
arguments对象与数组相似，可以通过arguments[0]来访问参数a，以此类推。
没有重载。如果JS中定义了两个名字相同的函数，则该名字只属于后定义的函数。

将变量设置为null，意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们所占用的内存。

-------------------------------------------------------------------------------------------

引用类型

Object类型:
var person = { "name":"lebron","age":"23","6":"Heat" };
var person = {}; person.name = "lebron";person.age = "23";person["6"] = "Heat";
var lbj = "name";
alert(person[lbj]);

Array数组类型:
var color = new Array("red","blue","green");
var color = ["red","blue","green"];
    alert(color[0]);	//red
所有对象都具有toLocaleString()、toString()、和valueOf()方法。//经常返回的都是相同的值。
toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。
color.join(",");  //red,blue,green

栈方法: push()    栈中项的插入（推入）
        pop()	  栈中项的移除（弹出）最新添加的项最早被移除
队列方法:	shift()		能够移除数组中的第一项并返回该项，同时将数组长度减1。与push()方法相结合可以使用队列一样使用数组。
		unshift()	能够在数组前端添加任意个项并返回新数组的长度。与pop()相结合可以长相反的方向来模拟队列。
重排序方法:	reverse()	反转数组项的顺序
		sort()		升序排列数组项（可以接受一个比较函数作为参数）
	function compare(value1,value2){
		if(value1 < value2){
			return -1;	
		}else if(value1 > value2){
			return 1;	
		}else{
			return 0;
		}
	}
		var values = [0,1,11,5,2,15];
		values.sort(compare);
		alert(values);	//0,1,2,5,11,15

操作方法:	concat()方法可以基于当前数组中的所有项创建一个新数组。
		slice()方法返回从该参数指定位置开始到当前数组末尾的所有项，如果有两个参数，返回起始和结束位置之间的项，但不包括结束位置的项。
		splice()方法:（1）删除:可以删除任意数量的项，只需指定2个参数（要删除的第一项的位置和要删除的项数）
			     （2）插入:可以向指定位置插入任意数量的项，只需指定3个或以上参数。（起始位置，0（要删除的项数），要插入的项）。如果要插入多项，可以插入第四、第五，以至任意多个项。
			     （3）替换:可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3个或以上参数。（起始位置，1（要删除的项数），要插入的项）。

位置方法:	indexOf()	返回 String 对象内第一次出现子字符串的字符位置
		lastIndexOf()	返回 String 对象中子字符串最后出现的位置

日期格式化(Date)方法:	toDateString()		--星期几、月、日和年
			toTimeString()		--时、分、秒和时区
			toLocaleDateString()	--星期几、月、日和年
			toLocaleTimeString()	--时、分、秒
			toUTCString()		--完整的UTC日期（toGMTString()方法等价）
		var d = new Date();
		d.get/setTime()			--返回/设置日期的毫秒数
		d.get/setFullYear()		--返回/设置4位数的年份
		d.get/setMonth()		--返回/设置月份。其中0表示一月，11表示12月。
		d.get/setDate()			--返回/设置日期的天数（1-31）（传人的数超过31则增加月份）
		d.get/setDay()			--返回/设置星期几（0表示星期日，6表示星期六）
		d.get/setHours()		--返回/设置小时数（0-23）（传入的数超过23则增加天数）
		d.get/setMinutes()		--返回/设置分钟数（0-59）（传人的数超过59则增加小时数）
		d.get/setSeconds()		--返回/设置秒数（0-59）（传入的数超过59则增加分钟数）
		d.get/setMilliseconds()		--返回/设置毫秒数

-------------------------------------------------------------------------------------------

RegExp类型（正则表达式）:	
	i     忽略大小写
	m     多行匹配
	\d    找出字符串第一个出现的数字  相当于[0-9]
	\D    相当于 [^\d]
	\w    英文、数字、下划线
	\W    相当于 [^\w]
	\s    空白字符               
	\S    相当于 [^\s]
	g     找到全部匹配的
	+     若干个  相当于 {1,}
	?     ?之前的内容可有可无,相当于{0,1}
	()    括号内与括号外隔开
	|     或者
	*     任意次 相当于{0,}
	{n}   正好出现n次
	{n,m} 最少n次，最多m次
	{n,}  最少n次，最多不限
	[]    取括号里面任意一个或者范围都可以
	^     除……外。如果在行首 字符串开头
	$     行尾 字符串结尾
	.     任意字符
	\.    .本身


方法:
	str.test(/re/)   			检测字符串是否匹配,返回true和false
	str.exec(/re/)				检索字符串中的正则表达式的匹配。找到匹配的文本则返回一个数组，否则返回null
	/re/.compile(/re/) 			方法用于在脚本执行过程中编译正则表达式,也可以用于改变和重新编译正则表达式。
	search(/re/)				检索与正则表达式相匹配的值，返回位置 //不执行全局匹配，忽略g、lastIndex属性
	match(/re/)				找到一个或多个正则表达式的匹配,不匹配返回null
	replace(/re/,"替换内容")   		替换与正则表达式匹配的字符串
	split("")  				把字符串分割为字符串数组
	substring()  				获取子字符串
	charAt() 				获取某个字符
	compile()				转换为内部的格式，从而执行得更快
	eval()					将传入的参数当做实际的ECMAScript语句来解析，然后把执行结果插入原位置
	
-------------------------------------------------------------------------------------------

Math方法:	Max()		最大值
		Min()		最小值
		Math.PI		3.14159...
		Math.ceil()	向上舍入
		Math.floor()	向下舍入
		Math.round()	标准四舍五入
		Math.random()	0-1之间的随机数，不包括0和1
		
-------------------------------------------------------------------------------------------

BOM（浏览器对象）

	window.open()		打开窗口
	window.close()		关闭窗口
	window.moveTo(x,y)	新位置的x和y的坐标值
	window.moveBy(x,y)	水平（x）和垂直（y）方向上移动的像素数
	outerWidth()		返回浏览器窗口本身的宽度
	outerHeight()		返回浏览器窗口本身的高度
	innerWidth()		表示页面视图区的宽度（减去边框宽度）
	innerHeight()		表示页面视图区的高度（减去边框高度）

alert（）	弹出框
confirm（）	确认取消对话框
prompt（）	提示框

-------------------------------------------------------------------------------------------

location对象
		href		返回当前页面完整的URL地址。
		port		返回URL地址中指定的端口号。
		protocol	返回页面使用的协议。通常是http:和https:
		search		返回URL的查询字符串。
		hostname	返回不带端口号的服务器名称
		host		返回服务器名称和端口号（如果有）
		hash		返回URL地址中的hash（#号后跟零或多个字符）

navigator对象
		appName		完整的浏览器名称
		appVersion	浏览器的版本
		buildId		浏览器编译版本
		cookieEnabled	表示cookie是否启用
		language 	浏览器的主语言
		cpuClass	客户端计算机中使用的CPU类型
		onLine 		表示浏览器是否连接到了因特网
		oscpu		客户端计算机的操作系统或使用的CPU
		platform	浏览器所在的系统平台
		plugins		浏览器中安装的插件信息的数组
		product		产品名称
		userAgent	浏览器的用户代理字符串
		userLanguage 	操作系统的默认语言

检测插件	
		name		插件名字
		description	插件的描述
		filename	插件的文件名
		length 		插件所处理的MIME类型数量

Screen对象

网页可见区域宽： document.body.clientWidth; 
网页可见区域高： document.body.clientHeight; 
网页可见区域宽： document.body.offsetWidth (包括边线的宽); 
网页可见区域高： document.body.offsetHeight (包括边线的高); 
网页正文全文宽： document.body.scrollWidth; 
网页正文全文高： document.body.scrollHeight; 
网页被卷去的高： document.body.scrollTop; 
网页被卷去的左： document.body.scrollLeft; 
网页正文部分上： window.screenTop; 
网页正文部分左： window.screenLeft; 
屏幕分辨率的高： window.screen.height; 
屏幕分辨率的宽： window.screen.width; 
屏幕可用工作区宽度： window.screen.availWidth;
屏幕可用工作区高度： window.screen.availHeight; 
scrollHeight: 	获取对象的滚动高度。 
scrollLeft:	设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离 
scrollTop:	设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离 
scrollWidth:	获取对象的滚动宽度 
offsetHeight:	获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度 
offsetLeft:	获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 
offsetTop:	获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 
event.clientX 	相对文档的水平座标 
event.clientY 	相对文档的垂直座标 
event.offsetX 	相对容器的水平坐标 
event.offsetY 	相对容器的垂直坐标 

history对象
		history.go(-1)		后退一页，与back()相同
		history.go(1)		前进一页，与forward()相同
		history.go(2)		前进两页

-------------------------------------------------------------------------------------------

DOM对象
		document.documentElement === document.childNodes[0] === document.firstChild（都指向<html>元素）

		slice(start,end)		返回一个数组的一段。start所指定部分的开始元素（0开始计算的下标），end为结束元素（可选）
		appendChild()			方法向节点添加最后一个子节点
		insertChild()			在现有的子节点前插入一个新的子节点 
		replaceChild()			接受两个参数，要插入的节点和要替换的节点
		removeChild()			接受一个参数，即要移除的节点

document对象
		document.anchors	所有带name特性的<a>元素
		document.applets	所有的<applet>元素
		document.forms		所有的<form>元素
		document.images		所有的<img>元素
		document.links		所有带href特性的<a>元素

Element类型
		id		唯一标识符
		title 		附加说明信息
		lang 		元素内容的语言代码
		dir		语言的方向（ltr--从左至右，rtl--从右至左）
		className	与元素class特性对应
		getAttribute	获取特性
		setAttribute	设置特性
		removeAttribute	删除特性

	childElementCount	返回子元素（不包括文本节点和注释）的个数
	firstElementChild	指向第一个子元素
	lastElementChild	指向最后一个子元素
	previousElementSibling	指向前一个同辈元素
	nextElementSibling	指向后一个同辈元素

innerHTML	返回与调用元素的所有子节点（包括元素、注释和文本节点）对应的HTML标记
outerHTML	在读模式下，返回调用它的元素及所有子节点的HTML标签;在写模式下，根据指定的HTML字符串创建新的DOM子树完全替换调用元素
innerText	可以操作元素中包含的所有文本内容，包括文档树中的文本。
outerText	在读取文本值时，outerText与innerText的结果完全一样;但在写模式下，outerText不只是替换调用它的元素的子节点，而是会替代整个元素（包括子节点）

偏移量	
	offsetHeight	元素在垂直方向上占用的空间大小（包括元素的高度、可见的水平滚动条高度和上下边框高度）
	offsetWidth	元素在水平方向上占用的空间大小（包括元素的宽度、可见的水平滚动条宽度和上下边框宽度）
	offsetLeft	元素的左外边框至包含元素的左内边框之间的像素距离
	offsetTop	元素的上外边框至包含元素的上内边框之间的像素距离
	clientWidth	元素内容区宽度加了左右内边距宽度
	clientHeight	元素内容区高度加了上下内边距高度
	scrollHeight	在没有滚动条的情况下，元素内容的总高度
	scrollWidth	在没有滚动条的情况下，元素内容的总宽度
	scrollLeft 	被隐藏在内容区域左侧的像素数（通过设置这个属性可以改变元素的滚动位置）
	scrollTop	被隐藏在内容区域上方的像素数（通过设置这个属性可以改变元素的滚动位置）

-------------------------------------------------------------------------------------------

事件

事件流包括三个阶段: 事件捕获阶段、处于目标阶段、事件冒泡阶段

	addEventListener() | removeEventListener()	用于处理指定和删除事件处理程序的操作,都接受3个参数（要处理的事件名、作为事件处理程序的函数和一个布尔值）
	attachEvent() | detachEvent()			IE事件处理程序，都接受2个参数(事件处理程序名称和事件处理程序函数)


-------------------------------------------------------------------------------------------

停止冒泡方法:

lis[i].onclick=function(e){
      	e = e || window.event;
      	if(e.stopPropagation){
          e.stopPropagation();
      	}else{
          e.cancelBubble=true;
      	}