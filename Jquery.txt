//引用Jquery库
<script type="text/javascript" src="/jquery/jquery.js"></script>

element		--根据给定的元素标签名匹配所有元素
*		--匹配所有元素
ancestor descendant	--在给定的祖先元素下匹配所有的后代元素
parent > child	--在给定的父元素下匹配所有的子元素
prev + next 	--匹配所有紧接在 prev 元素后的 next 元素
prev ~ siblings --匹配 prev 元素之后的所有 siblings 元素
:even		--匹配所有索引值为偶数的元素，从 0 开始计数
:odd		--匹配所有索引值为奇数的元素，从 0 开始计数
:not(selector)	--去除所有与给定选择器匹配的元素
:eq(index)      --匹配一个给定索引值的元素
:gt(index) 	--匹配所有大于给定索引值的元素
:lang(language) --选择指定语言的所有元素。
:lt(index)	--匹配所有小于给定索引值的元素
:header		--匹配如 h1, h2, h3之类的标题元素
:animated	--匹配所有正在执行动画效果的元素
:focus		--匹配当前获取焦点的元素。
:root		--选择该文档的根元素。选择该文档的根元素。在HTML中，文档的根元素，和$(":root")选择的元素一样， 永远是<html>元素。
:target		--选择由文档URI的格式化识别码表示的目标元素。
:contains(text)	--匹配包含给定文本的元素
:empty		--匹配所有不包含子元素或者文本的空元素
:has(selector)	--匹配含有选择器所匹配的元素的元素
:parent		--匹配含有子元素或者文本的元素
:hidden		--匹配所有不可见元素，或者type为hidden的元素
:enabled	--匹配所有可用元素
:disabled	--匹配所有不可用元素
:checked	--匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)
:selected	--匹配所有选中的option元素

[attribute]		--匹配包含给定属性的元素。
[attribute=value] 	--匹配给定的属性是某个特定值的元素
[attribute!=value]	--匹配所有不含有指定的属性，或者属性不等于特定值的元素。
[attribute^=value]	--匹配给定的属性是以某些值开始的元素
[attribute$=value]	--匹配给定的属性是以某些值结尾的元素
[attribute*=value]	--匹配给定的属性是以包含某些值的元素
[selector1][selector2][selectorN]	--复合属性选择器，需要同时满足多个条件时使用。

:first-child	--匹配第一个子元素。类似的 :first 匹配第一个元素，而此选择符将为每个父元素匹配一个子元素
:first-of-type	--选择所有相同的元素名称的第一个兄弟元素，等价于 :nth-of-type(1) 选择器。
:last-of-type	--选择的所有元素之间具有相同元素名称的最后一个兄弟元素
:nth-child	--匹配其父元素下的第N个子或奇偶元素
:nth-last-child(n|even|odd|formula)	--选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个。
:nth-last-of-type(n|even|odd|formula)	--选择的所有他们的父级元素的第n个子元素，计数从最后一个元素到第一个。
:nth-of-type(n|even|odd|formula)	--选择同属于一个父元素之下，并且标签名相同的子元素中的第n个。
:only-child	--如果某个元素是父元素中唯一的子元素，那将会被匹配；如果父元素中含有其他元素，那将不会被匹配。
:only-of-type	--选择所有没有兄弟元素，且具有相同的元素名称的元素。如果父元素有相同的元素名称的其他子元素，那么没有元素会被匹配。

:input		--匹配所有 input, textarea, select 和 button 元素
:text		--匹配所有的单行文本框
:password	--匹配所有密码框
:radio		--匹配所有单选按钮
:checkbox	--匹配所有复选框
:submit		--匹配所有提交按钮
:image		--匹配所有图像域
:reset		--匹配所有重置按钮
:button		--匹配所有按钮
:file		--匹配所有文件域


selector	--返回传给jQuery()的原始选择器。
context		--返回传给jQuery()的原始的DOM节点内容，即jQuery()的第二个参数。如果没有指定，那么context指向当前的文档(document)。
get(index)	--取得其中一个匹配的元素
index([selector|element])	--搜索匹配的元素，并返回相应元素的索引值，从0开始计数。
data([key],[value])		--在元素上存放或读取数据,返回jQuery对象。
removeData([name|list])		--在元素上移除存放的数据
queue(element,[queueName])	--显示或操作在匹配元素上执行的函数队列
dequeue([queueName])		--从队列最前端移除一个队列函数，并执行他。
clearQueue([queueName])		--清空对象上尚未执行的所有队列
jQuery.extend(object)		--扩展jQuery对象本身。




//按钮显示、隐藏菜单
$("#link_3").click(function () {
            if($("#leftmenu").is(":visible") == false){
                $("#leftmenu").css("display","block");
                $(this).children("a").text("隐藏菜单");
            }else{
                $("#leftmenu").css("display","none");
                $(this).children("a").text("显示菜单");
            }
        });

//主导航与左侧导航关联
$(function(){
        $("#headnav li").on("click",function(){
            var _id = $(this).index();
            $(this).addClass("on").siblings().removeClass("on");
            $("#leftmenu").find(".leftmenu-item").eq(_id).css("display","block").siblings(".leftmenu-item").css("display","none");            
        });

//标题淡入淡出效果
$("#leftmenu dl dt").on("click", function () {
           if($(this).siblings("dd").is(":visible") == false){
               $(this).css("background-position","right 10px")
           }else{
               $(this).css("background-position","right -42px");
           }
           $(this).siblings("dd").slideToggle("fast");
        });




$(this).hide(1000).show(2000) - 1000毫秒后隐藏当前元素,2000毫秒后显示

$("p.intro") 选取所有 class="intro" 的 <p> 元素。
$("p#demo") 选取 id="demo" 的第一个 <p> 元素。
$("ul li:first")	每个 <ul> 的第一个 <li> 元素

$("[href]") 选取所有带有 href 属性的元素。
$("[href$='.jpg']") 选取所有 href 值以 ".jpg" 结尾的元素。
$("div#intro .head")	id="intro" 的 <div> 元素中的所有 class="head" 的元素

$(document).ready(function)	将函数绑定到文档的就绪事件（当文档完成加载时） 
$(selector).click(function)	触发或将函数绑定到被选元素的点击事件
$(selector).dblclick(function)	触发或将函数绑定到被选元素的双击事件
$(selector).focus(function)	触发或将函数绑定到被选元素的获得焦点事件
$(selector).mouseover(function)	触发或将函数绑定到被选元素的鼠标悬停事件

$(selector).css(name,value)	为匹配元素设置样式属性的值
$(selector).css({properties})	为匹配元素设置多个样式属性
$(selector).css(name)		获得第一个匹配元素的样式属性值

jQuery 滑动函数 - slideDown, slideUp, slideToggle

$(selector).fadeIn(speed,function(){})   	//渐明渐显
$(selector).fadeOut(speed,function(){})	  	//渐隐
$(selector).fadeTo(speed,opacity,function(){})  //渐透明

		    CSS 属性,动画的时间,动画效果,回调函数function(){}
$(selector).animate({params},[duration],[easing],[callback])  //动画效果


$(selector).html(content)
html() 函数改变所匹配的 HTML 元素的内容（innerHTML）

$(selector).append(content)
append() 函数向所匹配的 HTML 元素内部追加内容

$(selector).prepend(content)
prepend() 函数向所匹配的 HTML 元素内部预置（Prepend）内容

$(selector).before(content)
before() 函数在所有匹配的元素之前插入 HTML 内容

$(selector).after(content)
after() 函数在所有匹配的元素之后插入 HTML 内容

.get()		获得由选择器指定的 DOM 元素。
.index()	返回指定元素相对于其他指定元素的 index 位置。
.size()		返回被 jQuery 选择器匹配的元素的数量。
.toArray()	以数组的形式返回 jQuery 选择器匹配的元素。

addClass()	向匹配的元素添加指定的类名。
hasClass()	检查匹配的元素是否拥有指定的类。
removeClass()	从所有匹配的元素中删除全部或者指定的类。
toggleClass()	从匹配的元素中添加或删除一个类。

prepend()	向每个匹配的元素内部前置内容。
append()	向匹配的元素内部追加内容。
insertAfter()	把匹配的元素插入到另一个指定的元素集合的后面。
insertBefore()	把匹配的元素插入到另一个指定的元素集合的前面。

.onfocus()	得到焦点事件
.onblur()	失去焦点事件



mousedown()     鼠标按下
mouseup() 	鼠标松开
mouseover()	鼠标接近（不点击）
mouseout()	鼠标离开（不点击）


text() - 设置或返回所选元素的文本内容

html() - 设置或返回所选元素的内容（包括 HTML 标记）

val() - 设置或返回表单字段的值

attr() - 设置或改变元素的属性


如需设置指定的 CSS 属性，请使用如下语法：
  css("propertyname","value");

如需设置多个 CSS 属性，请使用如下语法：
  css({"propertyname":"value","propertyname":"value",...});

//AJAX 
AJAX 是一种创建快速动态网页的技术。
AJAX 通过在后台与服务器交换少量数据的方式，允许网页进行异步更新。这意味着有可能在不重载整个页面的情况下，对网页的一部分进行更新。

$(selector).load(url,data,callback)	把远程数据加载到被选的元素中
$.ajax(options)	把远程数据加载到 XMLHttpRequest 对象中
$.get(url,data,callback,type)	使用 HTTP GET 来加载远程数据
$.post(url,data,callback,type)	使用 HTTP POST 来加载远程数据
$.getJSON(url,data,callback)	使用 HTTP GET 来加载远程 JSON 数据
$.getScript(url,callback)	加载并执行远程的 JavaScript 文件

(url) 被加载的数据的 URL（地址）
(data) 发送到服务器的数据的键/值对象
(callback) 当数据被加载时，所执行的函数
(type) 被返回的数据的类型 (html,xml,json,jasonp,script,text)
(options) 完整 AJAX 请求的所有键/值对选项


 $(selector).load(URL,data,callback);   
必需的 URL 参数规定您希望加载的 URL。
可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
可选的 callback 参数是 load() 方法完成后所执行的函数名称。


可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：
 responseTxt - 包含调用成功时的结果内容
 statusTxt - 包含调用的状态(success / error)
 xhr - 包含 XMLHttpRequest 对象
("Error: "+xhr.status+" "+xhr.statusText)  --错误弹出


GET - 从指定的资源请求数据
POST - 向指定的资源提交要处理的数据

GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据



 $.get(URL,callback); 
必需的 URL 参数规定您希望请求的 URL。
可选的 callback 参数是请求成功后所执行的函数名。
 
 $.post(URL,data,callback);   
必需的 URL 参数规定您希望请求的 URL。
可选的 data 参数规定连同请求发送的数据。
可选的 callback 参数是请求成功后所执行的函数名。



noConflict() 方法会释放会 $ 标识符的控制，这样其他脚本就可以使用它了。
var jq = $.noConflict();
 jq(document).ready(function(){
   jq("button").click(function(){
     jq("p").text("jQuery is still working!");
   });
 }); 